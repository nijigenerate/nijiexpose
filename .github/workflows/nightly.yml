# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Nightly

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:


permissions:
  contents: write

jobs:
  build-resources:
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 'Install dependencies'
      run: |
        sudo apt-get update
        sudo apt-get install gettext
        mkdir out/

    - name: 'Generate i18n'
      run: |
        # Build translations
        mkdir otl/
        
        if [ -n `$(find tl/ -name "*.po" 2>/dev/null)` ]
        then
            echo "No translations, skipping..."
        else
            sudo chmod +x gentl.sh
            ./gentl.sh
            cp out/* otl/
        fi

    - name: Make Artifact
      uses: actions/upload-artifact@v4
      with:
        name: translations
        path: otl/*
        retention-days: 1

  linux-zip:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4
    - uses: dlang-community/setup-dlang@v1.4.0
      with:
        compiler: ldc-latest
    
    - name: "Get build dependencies"
      run: |
        sudo apt-get update
        sudo apt install libsdl2-dev libfreetype6-dev gettext

    - name: 'Generate i18n'
      run: |
        sudo chmod +x gentl.sh
        ./gentl.sh

    - name: "Clone dependencies & set versions"
      run: |
        git clone https://github.com/nijigenerate/ng-facetrack-d.git
        dub add-local ng-facetrack-d/ "0.8.0"
        git clone https://github.com/inochi2d/i2d-imgui.git --recurse-submodules
        cd i2d-imgui
        git checkout c6a78f4a7510fd31a86998b7ceedfc2916ecfae0
        git submodule update --recursive
        cd ..
        dub add-local i2d-imgui/ "0.8.0"
        git clone https://github.com/nijigenerate/nijilive.git
        dub add-local nijilive/ "0.0.1"
        git clone https://github.com/nijigenerate/nijiui.git
        dub add-local nijiui/ "0.0.1"

    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.31'
    
    - name: CMake version
      run: cmake --version

    - name: 'Build nijiexpose'
      run: |
        # Build metadata (like version information and icons)
        dub build --config=meta

        # Build the project, with its main file included, without unittests
        dub build --compiler=ldc2 --config=linux-nightly --debug=InExperimental
          
    - name: Archive Zip
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: 'nijiexpose-linux-x86_64.zip'
        directory: 'out/'
        path: '*'

    - name: Release to nightly tag
      uses: softprops/action-gh-release@v1
      with:
        name: 'Nightly Build'
        tag_name: nightly
        files: |
          out/nijiexpose-linux-x86_64.zip
        generate_release_notes: true

  windows-zip:
    runs-on: windows-latest
    needs: build-resources

    steps:
    - uses: actions/checkout@v4
    - uses: dlang-community/setup-dlang@v1.4.0
      with:
        compiler: ldc-latest
        
    - name: Download translations
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: translations
        path: out/i18n/
      
    - name: "Clone dependencies & set versions"
      run: |
        git clone https://github.com/nijigenerate/ng-facetrack-d.git
        dub add-local ng-facetrack-d/ "0.8.0"
        git clone https://github.com/inochi2d/i2d-imgui.git --recurse-submodules
        cd i2d-imgui
        git checkout c6a78f4a7510fd31a86998b7ceedfc2916ecfae0
        git submodule update --recursive
        cd ..
        dub add-local i2d-imgui/ "0.8.0"
        git clone https://github.com/nijigenerate/nijilive.git
        dub add-local nijilive/ "0.0.1"
        git clone https://github.com/nijigenerate/nijiui.git
        dub add-local nijiui/ "0.0.1"

    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.31'
    
    - name: CMake version
      run: cmake --version

    - name: 'Build nijiexpose'
      run: |
        function Invoke-VSDevEnvironment {
        $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
              $installationPath = & $vswhere -prerelease -legacy -latest -property installationPath
              $Command = Join-Path $installationPath "Common7\Tools\vsdevcmd.bat"
            & "${env:COMSPEC}" /s /c "`"$Command`" -no_logo && set" | Foreach-Object {
                  if ($_ -match '^([^=]+)=(.*)') {
                      [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                  }
              }
          }
          Invoke-VSDevEnvironment
          
          # Build metadata (like version information and icons)
          dub build --config=meta

          # Build the project, with its main file included, without unittests
          dub build --compiler=ldc2 --config=win32-nightly --debug=InExperimental

    - name: Archive Zip
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: 'nijiexpose-win32-x86_64.zip'
        directory: 'out/'
        path: '*'

    - name: Release to nightly tag
      uses: softprops/action-gh-release@v1
      with:
        name: 'Nightly Build'
        tag_name: nightly
        files: 'out/nijiexpose-win32-x86_64.zip'

  macOS-dmg:
    runs-on: macos-14

    steps:
    - uses: actions/checkout@v4
    - uses: dlang-community/setup-dlang@v1.4.0
      with:
        compiler: ldc-latest
  
    - name: "Prepare for DMG packing"
      continue-on-error: true
      run: |
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
        brew update
        brew install create-dmg gettext

    - name: "Remove conflicting brew packages"
      continue-on-error: true
      run: |
        # Remove conflicting brew items
        brew remove --ignore-dependencies libpng brotli harfbuzz

    - name: "Remove final conflicting files"
      continue-on-error: true
      run: |
        # Delete fake harfbuzz if need be
        if [ -f "/usr/local/lib/libharfbuzz.dylib" ]; then
          sudo rm -r /usr/local/lib/libharfbuzz.dylib
        fi

        # And the .a for it as well
        if [ -f "/usr/local/lib/libharfbuzz.a" ]; then
          sudo rm -r /usr/local/lib/libharfbuzz.a
        fi

    - name: 'Generate i18n'
      run: |
        sudo chmod +x gentl.sh
        ./gentl.sh

    - name: "Clone dependencies & set versions"
      run: |
        git clone https://github.com/nijigenerate/ng-facetrack-d.git
        dub add-local ng-facetrack-d/ "0.8.0"
        git clone https://github.com/inochi2d/i2d-imgui.git --recurse-submodules
        cd i2d-imgui
        git checkout c6a78f4a7510fd31a86998b7ceedfc2916ecfae0
        git submodule update --recursive
        cd ..
        dub add-local i2d-imgui/ "0.8.0"
        git clone https://github.com/nijigenerate/nijilive.git
        dub add-local nijilive/ "0.0.1"
        git clone https://github.com/nijigenerate/nijiui.git
        dub add-local nijiui/ "0.0.1"

    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.31'
    
    - name: 'Build nijiexpose'
      env:
        DFLAGS: "-g -force-dwarf-frame-section=false"
      run: |
        # Build metadata (like version information and icons)
        dub build --config=meta

        # First build ARM64 version...
        echo "Building arm64 binary..."
        dub build --config=osx-nightly --arch=arm64-apple-macos
        mv "out/nijiexpose.app/Contents/MacOS/nijiexpose" "out/nijiexpose.app/Contents/MacOS/nijiexpose-arm64"

        ## Then the X86_64 version...
        echo "Building x86_64 binary..."
        dub build --config=osx-nightly --arch=x86_64-apple-macos
        mv "out/nijiexpose.app/Contents/MacOS/nijiexpose" "out/nijiexpose.app/Contents/MacOS/nijiexpose-x86_64"

        ## Glue them together with lipo
        echo "Gluing them together..."
        lipo "out/nijiexpose.app/Contents/MacOS/nijiexpose-x86_64" "out/nijiexpose.app/Contents/MacOS/nijiexpose-arm64" -output "out/nijiexpose.app/Contents/MacOS/nijiexpose" -create

        ## Print some nice info
        echo "Done!"
        lipo -info "out/nijiexpose.app/Contents/MacOS/nijiexpose"

        # Cleanup and bundle
        echo "Cleaning up..."
        rm "out/nijiexpose.app/Contents/MacOS/nijiexpose-x86_64" "out/nijiexpose.app/Contents/MacOS/nijiexpose-arm64"
        #rm "out/nijiexpose.app/Contents/MacOS/nijiexpose-arm64"
        ./build-aux/osx/osxbundle.sh

    - name: 'Build DMG'
      run: |
        ./build-aux/osx/gendmg.sh

    - name: Release to nightly tag
      uses: softprops/action-gh-release@v1
      with:
        name: 'Nightly Build'
        tag_name: nightly
        files: 'out/Install_nijiexpose.dmg'
